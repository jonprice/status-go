// Code generated by MockGen. DO NOT EDIT.
// Source: lib/statusapi.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	go_fcm "github.com/NaySoftware/go-fcm"
	keystore "github.com/ethereum/go-ethereum/accounts/keystore"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	common0 "github.com/status-im/status-go/geth/common"
	params "github.com/status-im/status-go/geth/params"
	reflect "reflect"
)

// MockStatusAPI is a mock of StatusAPI interface
type MockStatusAPI struct {
	ctrl     *gomock.Controller
	recorder *MockStatusAPIMockRecorder
}

// MockStatusAPIMockRecorder is the mock recorder for MockStatusAPI
type MockStatusAPIMockRecorder struct {
	mock *MockStatusAPI
}

// NewMockStatusAPI creates a new mock instance
func NewMockStatusAPI(ctrl *gomock.Controller) *MockStatusAPI {
	mock := &MockStatusAPI{ctrl: ctrl}
	mock.recorder = &MockStatusAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatusAPI) EXPECT() *MockStatusAPIMockRecorder {
	return m.recorder
}

// NodeManager mocks base method
func (m *MockStatusAPI) NodeManager() common0.NodeManager {
	ret := m.ctrl.Call(m, "NodeManager")
	ret0, _ := ret[0].(common0.NodeManager)
	return ret0
}

// NodeManager indicates an expected call of NodeManager
func (mr *MockStatusAPIMockRecorder) NodeManager() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeManager", reflect.TypeOf((*MockStatusAPI)(nil).NodeManager))
}

// AccountManager mocks base method
func (m *MockStatusAPI) AccountManager() common0.AccountManager {
	ret := m.ctrl.Call(m, "AccountManager")
	ret0, _ := ret[0].(common0.AccountManager)
	return ret0
}

// AccountManager indicates an expected call of AccountManager
func (mr *MockStatusAPIMockRecorder) AccountManager() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountManager", reflect.TypeOf((*MockStatusAPI)(nil).AccountManager))
}

// JailManager mocks base method
func (m *MockStatusAPI) JailManager() common0.JailManager {
	ret := m.ctrl.Call(m, "JailManager")
	ret0, _ := ret[0].(common0.JailManager)
	return ret0
}

// JailManager indicates an expected call of JailManager
func (mr *MockStatusAPIMockRecorder) JailManager() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JailManager", reflect.TypeOf((*MockStatusAPI)(nil).JailManager))
}

// TxQueueManager mocks base method
func (m *MockStatusAPI) TxQueueManager() common0.TxQueueManager {
	ret := m.ctrl.Call(m, "TxQueueManager")
	ret0, _ := ret[0].(common0.TxQueueManager)
	return ret0
}

// TxQueueManager indicates an expected call of TxQueueManager
func (mr *MockStatusAPIMockRecorder) TxQueueManager() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxQueueManager", reflect.TypeOf((*MockStatusAPI)(nil).TxQueueManager))
}

// StartNode mocks base method
func (m *MockStatusAPI) StartNode(config *params.NodeConfig) error {
	ret := m.ctrl.Call(m, "StartNode", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartNode indicates an expected call of StartNode
func (mr *MockStatusAPIMockRecorder) StartNode(config interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartNode", reflect.TypeOf((*MockStatusAPI)(nil).StartNode), config)
}

// StartNodeAsync mocks base method
func (m *MockStatusAPI) StartNodeAsync(config *params.NodeConfig) (<-chan struct{}, error) {
	ret := m.ctrl.Call(m, "StartNodeAsync", config)
	ret0, _ := ret[0].(<-chan struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartNodeAsync indicates an expected call of StartNodeAsync
func (mr *MockStatusAPIMockRecorder) StartNodeAsync(config interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartNodeAsync", reflect.TypeOf((*MockStatusAPI)(nil).StartNodeAsync), config)
}

// StopNode mocks base method
func (m *MockStatusAPI) StopNode() error {
	ret := m.ctrl.Call(m, "StopNode")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopNode indicates an expected call of StopNode
func (mr *MockStatusAPIMockRecorder) StopNode() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopNode", reflect.TypeOf((*MockStatusAPI)(nil).StopNode))
}

// StopNodeAsync mocks base method
func (m *MockStatusAPI) StopNodeAsync() (<-chan struct{}, error) {
	ret := m.ctrl.Call(m, "StopNodeAsync")
	ret0, _ := ret[0].(<-chan struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopNodeAsync indicates an expected call of StopNodeAsync
func (mr *MockStatusAPIMockRecorder) StopNodeAsync() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopNodeAsync", reflect.TypeOf((*MockStatusAPI)(nil).StopNodeAsync))
}

// RestartNode mocks base method
func (m *MockStatusAPI) RestartNode() error {
	ret := m.ctrl.Call(m, "RestartNode")
	ret0, _ := ret[0].(error)
	return ret0
}

// RestartNode indicates an expected call of RestartNode
func (mr *MockStatusAPIMockRecorder) RestartNode() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartNode", reflect.TypeOf((*MockStatusAPI)(nil).RestartNode))
}

// RestartNodeAsync mocks base method
func (m *MockStatusAPI) RestartNodeAsync() (<-chan struct{}, error) {
	ret := m.ctrl.Call(m, "RestartNodeAsync")
	ret0, _ := ret[0].(<-chan struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartNodeAsync indicates an expected call of RestartNodeAsync
func (mr *MockStatusAPIMockRecorder) RestartNodeAsync() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartNodeAsync", reflect.TypeOf((*MockStatusAPI)(nil).RestartNodeAsync))
}

// ResetChainData mocks base method
func (m *MockStatusAPI) ResetChainData() error {
	ret := m.ctrl.Call(m, "ResetChainData")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetChainData indicates an expected call of ResetChainData
func (mr *MockStatusAPIMockRecorder) ResetChainData() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetChainData", reflect.TypeOf((*MockStatusAPI)(nil).ResetChainData))
}

// ResetChainDataAsync mocks base method
func (m *MockStatusAPI) ResetChainDataAsync() (<-chan struct{}, error) {
	ret := m.ctrl.Call(m, "ResetChainDataAsync")
	ret0, _ := ret[0].(<-chan struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetChainDataAsync indicates an expected call of ResetChainDataAsync
func (mr *MockStatusAPIMockRecorder) ResetChainDataAsync() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetChainDataAsync", reflect.TypeOf((*MockStatusAPI)(nil).ResetChainDataAsync))
}

// CallRPC mocks base method
func (m *MockStatusAPI) CallRPC(inputJSON string) string {
	ret := m.ctrl.Call(m, "CallRPC", inputJSON)
	ret0, _ := ret[0].(string)
	return ret0
}

// CallRPC indicates an expected call of CallRPC
func (mr *MockStatusAPIMockRecorder) CallRPC(inputJSON interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallRPC", reflect.TypeOf((*MockStatusAPI)(nil).CallRPC), inputJSON)
}

// CreateAccount mocks base method
func (m *MockStatusAPI) CreateAccount(password string) common0.AccountInfo {
	ret := m.ctrl.Call(m, "CreateAccount", password)
	ret0, _ := ret[0].(common0.AccountInfo)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockStatusAPIMockRecorder) CreateAccount(password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStatusAPI)(nil).CreateAccount), password)
}

// CreateChildAccount mocks base method
func (m *MockStatusAPI) CreateChildAccount(parentAddress, password string) common0.AccountInfo {
	ret := m.ctrl.Call(m, "CreateChildAccount", parentAddress, password)
	ret0, _ := ret[0].(common0.AccountInfo)
	return ret0
}

// CreateChildAccount indicates an expected call of CreateChildAccount
func (mr *MockStatusAPIMockRecorder) CreateChildAccount(parentAddress, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChildAccount", reflect.TypeOf((*MockStatusAPI)(nil).CreateChildAccount), parentAddress, password)
}

// RecoverAccount mocks base method
func (m *MockStatusAPI) RecoverAccount(password, mnemonic string) common0.AccountInfo {
	ret := m.ctrl.Call(m, "RecoverAccount", password, mnemonic)
	ret0, _ := ret[0].(common0.AccountInfo)
	return ret0
}

// RecoverAccount indicates an expected call of RecoverAccount
func (mr *MockStatusAPIMockRecorder) RecoverAccount(password, mnemonic interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverAccount", reflect.TypeOf((*MockStatusAPI)(nil).RecoverAccount), password, mnemonic)
}

// VerifyAccountPassword mocks base method
func (m *MockStatusAPI) VerifyAccountPassword(keyStoreDir, address, password string) (*keystore.Key, error) {
	ret := m.ctrl.Call(m, "VerifyAccountPassword", keyStoreDir, address, password)
	ret0, _ := ret[0].(*keystore.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAccountPassword indicates an expected call of VerifyAccountPassword
func (mr *MockStatusAPIMockRecorder) VerifyAccountPassword(keyStoreDir, address, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAccountPassword", reflect.TypeOf((*MockStatusAPI)(nil).VerifyAccountPassword), keyStoreDir, address, password)
}

// SelectAccount mocks base method
func (m *MockStatusAPI) SelectAccount(address, password string) error {
	ret := m.ctrl.Call(m, "SelectAccount", address, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectAccount indicates an expected call of SelectAccount
func (mr *MockStatusAPIMockRecorder) SelectAccount(address, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAccount", reflect.TypeOf((*MockStatusAPI)(nil).SelectAccount), address, password)
}

// Logout mocks base method
func (m *MockStatusAPI) Logout() error {
	ret := m.ctrl.Call(m, "Logout")
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockStatusAPIMockRecorder) Logout() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockStatusAPI)(nil).Logout))
}

// SendTransaction mocks base method
func (m *MockStatusAPI) SendTransaction(ctx context.Context, args common0.SendTxArgs) (common.Hash, error) {
	ret := m.ctrl.Call(m, "SendTransaction", ctx, args)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction
func (mr *MockStatusAPIMockRecorder) SendTransaction(ctx, args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockStatusAPI)(nil).SendTransaction), ctx, args)
}

// CompleteTransaction mocks base method
func (m *MockStatusAPI) CompleteTransaction(id common0.QueuedTxID, password string) (common.Hash, error) {
	ret := m.ctrl.Call(m, "CompleteTransaction", id, password)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteTransaction indicates an expected call of CompleteTransaction
func (mr *MockStatusAPIMockRecorder) CompleteTransaction(id, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTransaction", reflect.TypeOf((*MockStatusAPI)(nil).CompleteTransaction), id, password)
}

// CompleteTransactions mocks base method
func (m *MockStatusAPI) CompleteTransactions(ids []common0.QueuedTxID, password string) map[common0.QueuedTxID]common0.RawCompleteTransactionResult {
	ret := m.ctrl.Call(m, "CompleteTransactions", ids, password)
	ret0, _ := ret[0].(map[common0.QueuedTxID]common0.RawCompleteTransactionResult)
	return ret0
}

// CompleteTransactions indicates an expected call of CompleteTransactions
func (mr *MockStatusAPIMockRecorder) CompleteTransactions(ids, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTransactions", reflect.TypeOf((*MockStatusAPI)(nil).CompleteTransactions), ids, password)
}

// DiscardTransaction mocks base method
func (m *MockStatusAPI) DiscardTransaction(id common0.QueuedTxID) error {
	ret := m.ctrl.Call(m, "DiscardTransaction", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DiscardTransaction indicates an expected call of DiscardTransaction
func (mr *MockStatusAPIMockRecorder) DiscardTransaction(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscardTransaction", reflect.TypeOf((*MockStatusAPI)(nil).DiscardTransaction), id)
}

// DiscardTransactions mocks base method
func (m *MockStatusAPI) DiscardTransactions(ids []common0.QueuedTxID) map[common0.QueuedTxID]common0.RawDiscardTransactionResult {
	ret := m.ctrl.Call(m, "DiscardTransactions", ids)
	ret0, _ := ret[0].(map[common0.QueuedTxID]common0.RawDiscardTransactionResult)
	return ret0
}

// DiscardTransactions indicates an expected call of DiscardTransactions
func (mr *MockStatusAPIMockRecorder) DiscardTransactions(ids interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscardTransactions", reflect.TypeOf((*MockStatusAPI)(nil).DiscardTransactions), ids)
}

// JailParse mocks base method
func (m *MockStatusAPI) JailParse(chatID, js string) string {
	ret := m.ctrl.Call(m, "JailParse", chatID, js)
	ret0, _ := ret[0].(string)
	return ret0
}

// JailParse indicates an expected call of JailParse
func (mr *MockStatusAPIMockRecorder) JailParse(chatID, js interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JailParse", reflect.TypeOf((*MockStatusAPI)(nil).JailParse), chatID, js)
}

// CreateAndInitCell mocks base method
func (m *MockStatusAPI) CreateAndInitCell(chatID, js string) string {
	ret := m.ctrl.Call(m, "CreateAndInitCell", chatID, js)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateAndInitCell indicates an expected call of CreateAndInitCell
func (mr *MockStatusAPIMockRecorder) CreateAndInitCell(chatID, js interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndInitCell", reflect.TypeOf((*MockStatusAPI)(nil).CreateAndInitCell), chatID, js)
}

// JailCall mocks base method
func (m *MockStatusAPI) JailCall(chatID, this, args string) string {
	ret := m.ctrl.Call(m, "JailCall", chatID, this, args)
	ret0, _ := ret[0].(string)
	return ret0
}

// JailCall indicates an expected call of JailCall
func (mr *MockStatusAPIMockRecorder) JailCall(chatID, this, args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JailCall", reflect.TypeOf((*MockStatusAPI)(nil).JailCall), chatID, this, args)
}

// JailExecute mocks base method
func (m *MockStatusAPI) JailExecute(chatID, code string) string {
	ret := m.ctrl.Call(m, "JailExecute", chatID, code)
	ret0, _ := ret[0].(string)
	return ret0
}

// JailExecute indicates an expected call of JailExecute
func (mr *MockStatusAPIMockRecorder) JailExecute(chatID, code interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JailExecute", reflect.TypeOf((*MockStatusAPI)(nil).JailExecute), chatID, code)
}

// SetJailBaseJS mocks base method
func (m *MockStatusAPI) SetJailBaseJS(js string) {
	m.ctrl.Call(m, "SetJailBaseJS", js)
}

// SetJailBaseJS indicates an expected call of SetJailBaseJS
func (mr *MockStatusAPIMockRecorder) SetJailBaseJS(js interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJailBaseJS", reflect.TypeOf((*MockStatusAPI)(nil).SetJailBaseJS), js)
}

// Notify mocks base method
func (m *MockStatusAPI) Notify(token string) string {
	ret := m.ctrl.Call(m, "Notify", token)
	ret0, _ := ret[0].(string)
	return ret0
}

// Notify indicates an expected call of Notify
func (mr *MockStatusAPIMockRecorder) Notify(token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockStatusAPI)(nil).Notify), token)
}

// NotifyUsers mocks base method
func (m *MockStatusAPI) NotifyUsers(message string, payload go_fcm.NotificationPayload, tokens ...string) error {
	varargs := []interface{}{message, payload}
	for _, a := range tokens {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NotifyUsers", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyUsers indicates an expected call of NotifyUsers
func (mr *MockStatusAPIMockRecorder) NotifyUsers(message, payload interface{}, tokens ...interface{}) *gomock.Call {
	varargs := append([]interface{}{message, payload}, tokens...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyUsers", reflect.TypeOf((*MockStatusAPI)(nil).NotifyUsers), varargs...)
}

// ValidateJSONConfig mocks base method
func (m *MockStatusAPI) ValidateJSONConfig(configJSON string) common0.APIDetailedResponse {
	ret := m.ctrl.Call(m, "ValidateJSONConfig", configJSON)
	ret0, _ := ret[0].(common0.APIDetailedResponse)
	return ret0
}

// ValidateJSONConfig indicates an expected call of ValidateJSONConfig
func (mr *MockStatusAPIMockRecorder) ValidateJSONConfig(configJSON interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateJSONConfig", reflect.TypeOf((*MockStatusAPI)(nil).ValidateJSONConfig), configJSON)
}
